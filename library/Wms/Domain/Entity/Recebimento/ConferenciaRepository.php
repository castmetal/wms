<?php

namespace Wms\Domain\Entity\Recebimento;

use Doctrine\ORM\EntityRepository,
    Wms\Domain\Entity\Produto\Conferencia as ConferenciaEntity;

/**
 * Conferencia
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConferenciaRepository extends EntityRepository
{

    public function getLastOsConferencia ($idRecebimento, $idProduto, $grade)
    {
		$query = "
					SELECT DTH_FINAL_ATIVIDADE, COD_OS FROM (
					SELECT CASE WHEN OS.DTH_FINAL_ATIVIDADE IS NULL THEN TO_DATE('31/12/9999','dd/mm/yyyy')
								ELSE OS.DTH_FINAL_ATIVIDADE END AS DTH_FINAL_ATIVIDADE,
								  RC.COD_OS
					  FROM RECEBIMENTO_CONFERENCIA RC
					  LEFT JOIN ORDEM_SERVICO OS ON RC.COD_OS = OS.COD_OS
					WHERE RC.COD_RECEBIMENTO = $idRecebimento  
					  AND RC.COD_PRODUTO = $idProduto
					  AND RC.DSC_GRADE = '$grade') ORDER BY DTH_FINAL_ATIVIDADE DESC
		";
        $result = $this->getEntityManager()->getConnection()->query($query)-> fetchAll(\PDO::FETCH_ASSOC);

		if ($result == NULL) {
			return 0;
		} else {
			return $result[0]['COD_OS'];
		}
	}

    public function getOsConferida ($idRecebimento, $idProduto, $grade)
    {
        $source = $this->getEntityManager()->createQueryBuilder()
            ->select("os.id")
            ->from("wms:Recebimento\Conferencia","c")
            ->innerJoin("c.ordemServico" , "os")
            ->where("c.recebimento = $idRecebimento")
            ->andWhere("c.grade = '$grade'")
            ->andWhere("c.codProduto = $idProduto")
            ->andWhere("(c.qtdDivergencia = 0 OR (c.qtdDivergencia != 0 AND NOT(c.notaFiscal IS NULL)))");
        $conferencia =  $source->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        if (count($conferencia) <= 0) {
            return 0;
        } else{
            return $conferencia[0]['id'];
        }
    }

    public function getQtdByRecebimento ($idRecebimento, $idProduto, $grade)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select("r.qtd, r.codNormaPaletizacao as idNormaPaletizacao, np.numNorma, un.id as idUnitizador")
            ->from("wms:Recebimento\VQtdRecebimento", "r")
            ->leftjoin("wms:Produto\NormaPaletizacao", "np","WITH","np.id = r.codNormaPaletizacao")
            ->leftJoin('np.unitizador','un')
            ->where("r.codProduto = $idProduto")
            ->andWhere("r.grade = '$grade'")
            ->andWhere("r.codRecebimento = $idRecebimento");
        $result = $query->getQuery()->getArrayResult();

        if (count($result) > 0) {
            return $result;
        } else {
            return array();
        }
    }

    /**
     *
     * @param int $idOrdemServico
     * @return array Result set 
     */
    public function getProdutoDivergencia($idOrdemServico)
    {
        $sql = $this->getEntityManager()->createQuery('
                SELECT c.id, p.id idProduto, p.grade, p.descricao dscProduto, c.qtdConferida, c.qtdAvaria, c.qtdDivergencia 
                FROM wms:Recebimento\Conferencia c
                INNER JOIN c.produto p
                WHERE c.ordemServico = ?1
                    AND p.grade = c.grade
                    AND c.qtdDivergencia != 0')
                ->setParameter(1, $idOrdemServico);

        return $sql->getResult();
    }

}
